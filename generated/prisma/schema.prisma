generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  firebaseUid String       @unique
  email       String       @unique
  fullName    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  apiKeys     ApiKey[]
  appliedJobs AppliedJob[]
  Progress    Progress?

  @@index([firebaseUid])
  @@index([email])
}

model ApiKey {
  id         String    @id @default(cuid())
  key        String    @unique
  name       String
  userId     String
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  isActive   Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([userId])
  @@index([isActive])
}

model AppliedJob {
  id          String   @id @default(cuid())
  userId      String
  title       String
  company     String?
  location    String?
  url         String
  appliedDate DateTime @default(now())
  appliedText String?
  status      String   @default("Applied")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @default("Website")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, url])
  @@index([userId])
  @@index([status])
  @@index([type])
}

model Progress {
  id        String   @id
  userId    String   @unique
  weeks     Json
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
